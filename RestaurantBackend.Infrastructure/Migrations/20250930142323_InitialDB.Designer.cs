// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RestaurantBackend.Infrastructure.Data;

#nullable disable

namespace RestaurantBackend.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250930142323_InitialDB")]
    partial class InitialDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RestaurantBackend.Domain.Entities.Dish", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("AverageRating")
                        .HasColumnType("real");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsVegetarian")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifyDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Dishes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c426364c-f707-4e96-4185-08dc375d5081"),
                            AverageRating = 0f,
                            Category = 0,
                            CreateDateTime = new DateTime(2024, 2, 27, 6, 28, 30, 319, DateTimeKind.Utc).AddTicks(1652),
                            Description = "Wheat noodles stir-fried in a wok with pepperoni sausages, olives, sweet pepper, jalapeño peppers in tomato sauce, garnished with parsley. PFC per 100g: Protein, g — 8.18, Fat, g — 16.33, Carbohydrates, g — 20.62",
                            IsVegetarian = false,
                            ModifyDateTime = new DateTime(2024, 2, 27, 6, 28, 30, 319, DateTimeKind.Utc).AddTicks(1652),
                            Name = "Wok à la Diablo",
                            Photo = "https://imgproxy.kuper.ru/imgproxy/size-500-500/czM6Ly9jb250ZW50LWltYWdlcy1wcm9kL3Byb2R1Y3RzLzI3MjM1MTU4L29yaWdpbmFsLzEvMjAyMy0xMC0xMlQyMyUzQTA3JTNBMDUuMzUxNTk3JTJCMDAlM0EwMC8yNzIzNTE1OF8xLmpwZw==.avif",
                            Price = 330.0
                        },
                        new
                        {
                            Id = new Guid("61b330b6-8b72-428b-4186-08dc375d5081"),
                            AverageRating = 0f,
                            Category = 0,
                            CreateDateTime = new DateTime(2024, 2, 27, 6, 28, 30, 319, DateTimeKind.Utc).AddTicks(1667),
                            Description = "Wheat noodles stir-fried in a wok with minced meat (beef/pork) and vegetables (mushrooms, sweet pepper, red onion) in tomato sauce, flavored with garlic-ginger dressing and garnished with parsley. PFC per 100g: Protein, g — 8.07, Fat, g — 15.38, Carbohydrates, g — 23.22",
                            IsVegetarian = false,
                            ModifyDateTime = new DateTime(2024, 2, 27, 6, 28, 30, 319, DateTimeKind.Utc).AddTicks(1667),
                            Name = "Wok Bolognese",
                            Photo = "https://media.leverans.ru/product_images_inactive/tomsk/mr-tako/663ab866-85ec-11ea-a9ab-86b1f8341741.jpg",
                            Price = 290.0
                        },
                        new
                        {
                            Id = new Guid("fa5dc97a-6ffa-4476-4187-08dc375d5081"),
                            AverageRating = 0f,
                            Category = 0,
                            CreateDateTime = new DateTime(2024, 2, 27, 6, 28, 30, 319, DateTimeKind.Utc).AddTicks(1676),
                            Description = "Wheat noodles, chicken fillet, mushrooms, red onion, Tom Yum dressing (Tom Yum paste, Tom Kha paste, sugar, soy sauce), cream, soy sauce, tomato, chili pepper. PFC per 100g: Protein, g — 7.05, Fat, g — 12.92, Carbohydrates, g — 18.65",
                            IsVegetarian = false,
                            ModifyDateTime = new DateTime(2024, 2, 27, 6, 28, 30, 319, DateTimeKind.Utc).AddTicks(1676),
                            Name = "Wok Tom Yum with Chicken",
                            Photo = "https://nomadette.com/wp-content/uploads/2023/06/Tom-Yum-Stir-Fry.jpg",
                            Price = 280.0
                        },
                        new
                        {
                            Id = new Guid("e054224e-65ef-4df3-4188-08dc375d5081"),
                            AverageRating = 0f,
                            Category = 0,
                            CreateDateTime = new DateTime(2024, 2, 27, 6, 28, 30, 319, DateTimeKind.Utc).AddTicks(1681),
                            Description = "Wheat noodles, shrimp, squid, mushrooms, red onion, Tom Yum dressing (Tom Yum paste, Tom Kha paste, sugar, soy sauce), cream, soy sauce, tomato, chili pepper. PFC per 100g: Protein, g — 8.57, Fat, g — 12.8, Carbohydrates, g — 18.8",
                            IsVegetarian = false,
                            ModifyDateTime = new DateTime(2024, 2, 27, 6, 28, 30, 319, DateTimeKind.Utc).AddTicks(1681),
                            Name = "Wok Tom Yum with Seafood",
                            Photo = "https://static.1000.menu/files/user-v2/3e/74/211/foto/f_14-10-2024-07-40-50.1728891651.jpg",
                            Price = 340.0
                        },
                        new
                        {
                            Id = new Guid("49751e81-8c0e-480f-4189-08dc375d5081"),
                            AverageRating = 0f,
                            Category = 0,
                            CreateDateTime = new DateTime(2024, 2, 27, 6, 28, 30, 319, DateTimeKind.Utc).AddTicks(1691),
                            Description = "Wheat noodles, mushrooms, red onion, Tom Yum dressing (Tom Yum paste, Tom Kha paste, sugar, soy sauce), cream, soy sauce, tomato, chili pepper. PFC per 100g: Protein, g — 5.32, Fat, g — 14.89, Carbohydrates, g — 22.46",
                            IsVegetarian = true,
                            ModifyDateTime = new DateTime(2024, 2, 27, 6, 28, 30, 319, DateTimeKind.Utc).AddTicks(1691),
                            Name = "Wok Tom Yum with Vegetables",
                            Photo = "https://blog.pokupon.ua/wp-content/uploads/2020/05/vok-doma.jpg",
                            Price = 250.0
                        },
                        new
                        {
                            Id = new Guid("1576460c-ace8-4207-418a-08dc375d5081"),
                            AverageRating = 0f,
                            Category = 1,
                            CreateDateTime = new DateTime(2024, 2, 27, 6, 28, 30, 319, DateTimeKind.Utc).AddTicks(1701),
                            Description = "Four Cheese: Mozzarella, Gouda, Feta, Dor Blue, creamy cheese sauce, and aromatic herbs",
                            IsVegetarian = true,
                            ModifyDateTime = new DateTime(2024, 2, 27, 6, 28, 30, 319, DateTimeKind.Utc).AddTicks(1701),
                            Name = "Four Cheese",
                            Photo = "https://avatars.mds.yandex.net/i?id=915e548c6f9167f66007e61edb6749d7_l-10870632-images-thumbs&n=13",
                            Price = 360.0
                        },
                        new
                        {
                            Id = new Guid("c85b87b8-db43-4004-418b-08dc375d5081"),
                            AverageRating = 0f,
                            Category = 1,
                            CreateDateTime = new DateTime(2024, 2, 27, 6, 28, 30, 319, DateTimeKind.Utc).AddTicks(1706),
                            Description = "Bacon, pickled cucumber, lingonberries, Mozzarella cheese, Gouda cheese, BBQ sauce",
                            IsVegetarian = false,
                            ModifyDateTime = new DateTime(2024, 2, 27, 6, 28, 30, 319, DateTimeKind.Utc).AddTicks(1706),
                            Name = "Party BBQ",
                            Photo = "https://images.gastronom.ru/4y_Q09IWsFuzepo5xbyYiEjnQjnXXaAGSepQqI8MLH8/pr:recipe-cover-image/g:ce/rs:auto:0:0:0/L2Ntcy9hbGwtaW1hZ2VzLzRmOGI1YjRiLTM0ZjMtNGNlNy04NzIwLWYyMGQ3NjVlMGE2Ni5qcGc.webp",
                            Price = 480.0
                        },
                        new
                        {
                            Id = new Guid("2ed9c122-e260-49d4-418c-08dc375d5081"),
                            AverageRating = 0f,
                            Category = 1,
                            CreateDateTime = new DateTime(2024, 2, 27, 6, 28, 30, 319, DateTimeKind.Utc).AddTicks(1715),
                            Description = "Smoked chicken breast, fresh mushrooms, pickled honey agarics, Mozzarella cheese, Gouda cheese, creamy garlic sauce, fresh herbs",
                            IsVegetarian = false,
                            ModifyDateTime = new DateTime(2024, 2, 27, 6, 28, 30, 319, DateTimeKind.Utc).AddTicks(1715),
                            Name = "Bellissimo",
                            Photo = "https://slicelife.imgix.net/677/photos/original/product-bellissimo-s-special-pizza-2444978.jpeg?auto=compress&auto=format",
                            Price = 400.0
                        },
                        new
                        {
                            Id = new Guid("f1dd96aa-c73c-4279-418d-08dc375d5081"),
                            AverageRating = 0f,
                            Category = 2,
                            CreateDateTime = new DateTime(2024, 2, 27, 6, 28, 30, 319, DateTimeKind.Utc).AddTicks(1725),
                            Description = "Cheese broth with wheat noodles, boiled chicken fillet, tomato, and cheese balls. PFC per 100g: Protein, g — 11.8, Fat, g — 9.82, Carbohydrates, g — 22.69",
                            IsVegetarian = false,
                            ModifyDateTime = new DateTime(2024, 2, 27, 6, 28, 30, 319, DateTimeKind.Utc).AddTicks(1725),
                            Name = "Cheesy Ramen",
                            Photo = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTlcp7ywU4kvXbWLlQOHWzJlc4XY-NBrIqfog&s",
                            Price = 300.0
                        },
                        new
                        {
                            Id = new Guid("461ee2ed-dbf2-434a-418e-08dc375d5081"),
                            AverageRating = 0f,
                            Category = 2,
                            CreateDateTime = new DateTime(2024, 2, 27, 6, 28, 30, 319, DateTimeKind.Utc).AddTicks(1735),
                            Description = "Ramen broth with cream (chicken broth, garlic-ginger dressing, soy sauce) with wheat noodles, boiled chicken, Tamago omelet, and mushrooms. PFC per 100g: Protein, g — 8.13, Fat, g — 6.18, Carbohydrates, g — 8.08",
                            IsVegetarian = false,
                            ModifyDateTime = new DateTime(2024, 2, 27, 6, 28, 30, 319, DateTimeKind.Utc).AddTicks(1735),
                            Name = "Creamy Ramen with Chicken and Mushrooms",
                            Photo = "https://www.budgetbytes.com/wp-content/uploads/2019/09/Vegan-Creamy-Mushroom-Ramen-close.jpg",
                            Price = 260.0
                        },
                        new
                        {
                            Id = new Guid("ab8513f4-ed60-4534-418f-08dc375d5081"),
                            AverageRating = 0f,
                            Category = 2,
                            CreateDateTime = new DateTime(2024, 2, 27, 6, 28, 30, 319, DateTimeKind.Utc).AddTicks(1740),
                            Description = "Famous Thai spicy soup with cream, chicken fillet, mushrooms, red onion, tomato, chili pepper, and cilantro. Served with rice. PFC per 100g: Protein, g — 5.75, Fat, g — 3.72, Carbohydrates, g — 14.76",
                            IsVegetarian = false,
                            ModifyDateTime = new DateTime(2024, 2, 27, 6, 28, 30, 319, DateTimeKind.Utc).AddTicks(1740),
                            Name = "Tom Yum Gai",
                            Photo = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRr5ngLC9pk6urmMRdTiRDYne3ytk1Q2ioSjg&s",
                            Price = 300.0
                        },
                        new
                        {
                            Id = new Guid("58941892-95d2-4fca-4190-08dc375d5081"),
                            AverageRating = 0f,
                            Category = 4,
                            CreateDateTime = new DateTime(2024, 2, 27, 6, 28, 30, 319, DateTimeKind.Utc).AddTicks(1759),
                            Description = "Sea buckthorn, ginger, sugar",
                            IsVegetarian = true,
                            ModifyDateTime = new DateTime(2024, 2, 27, 6, 28, 30, 319, DateTimeKind.Utc).AddTicks(1759),
                            Name = "Sea Buckthorn Juice",
                            Photo = "https://24-ok.ru/image/lot/main/2023/01/13/04/a4bb3044c5d204aa4948ca56b115a4e4.jpg",
                            Price = 90.0
                        },
                        new
                        {
                            Id = new Guid("6c3dcd8b-4f27-4874-4191-08dc375d5081"),
                            AverageRating = 0f,
                            Category = 4,
                            CreateDateTime = new DateTime(2024, 2, 27, 6, 28, 30, 319, DateTimeKind.Utc).AddTicks(1769),
                            Description = "Blackcurrant juice",
                            IsVegetarian = true,
                            ModifyDateTime = new DateTime(2024, 2, 27, 6, 28, 30, 319, DateTimeKind.Utc).AddTicks(1769),
                            Name = "Blackcurrant Juice",
                            Photo = "https://avatars.mds.yandex.net/i?id=dfd98c18b1208fb86df895a7a5bc1783_l-5129388-images-thumbs&n=13",
                            Price = 90.0
                        },
                        new
                        {
                            Id = new Guid("93493445-8194-4de2-4192-08dc375d5081"),
                            AverageRating = 0f,
                            Category = 4,
                            CreateDateTime = new DateTime(2024, 2, 27, 6, 28, 30, 319, DateTimeKind.Utc).AddTicks(1779),
                            Description = "Classic milkshake",
                            IsVegetarian = true,
                            ModifyDateTime = new DateTime(2024, 2, 27, 6, 28, 30, 319, DateTimeKind.Utc).AddTicks(1779),
                            Name = "Classic Milkshake",
                            Photo = "https://www.sharmispassions.com/wp-content/uploads/2016/04/VanillaMilkshake2.jpg",
                            Price = 140.0
                        },
                        new
                        {
                            Id = new Guid("8e0ec4df-52eb-44fd-4193-08dc375d5081"),
                            AverageRating = 0f,
                            Category = 4,
                            CreateDateTime = new DateTime(2024, 2, 27, 6, 28, 30, 319, DateTimeKind.Utc).AddTicks(1784),
                            Description = "Classic milkshake with strawberry topping",
                            IsVegetarian = true,
                            ModifyDateTime = new DateTime(2024, 2, 27, 6, 28, 30, 319, DateTimeKind.Utc).AddTicks(1784),
                            Name = "Strawberry Milkshake",
                            Photo = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSijQMCblLcadVZX1kzhdeVsxQnzo58nHDjJQ&s.jpg",
                            Price = 170.0
                        },
                        new
                        {
                            Id = new Guid("2135ede2-043c-4f8e-4194-08dc375d5081"),
                            AverageRating = 0f,
                            Category = 4,
                            CreateDateTime = new DateTime(2024, 2, 27, 6, 28, 30, 319, DateTimeKind.Utc).AddTicks(1794),
                            Description = "Classic milkshake with chocolate topping",
                            IsVegetarian = true,
                            ModifyDateTime = new DateTime(2024, 2, 27, 6, 28, 30, 319, DateTimeKind.Utc).AddTicks(1794),
                            Name = "Chocolate Milkshake",
                            Photo = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTHhQ9CIw42wDRtzJEnQmeqPMYQ9TDNBEUziQ&s",
                            Price = 170.0
                        },
                        new
                        {
                            Id = new Guid("35286bf7-3459-44fe-4195-08dc375d5081"),
                            AverageRating = 0f,
                            Category = 3,
                            CreateDateTime = new DateTime(2024, 2, 27, 6, 28, 30, 319, DateTimeKind.Utc).AddTicks(1803),
                            Description = "Orange, banana, chocolate chips, cottage cheese, cheese flatbread. PFC per 100g: Protein, g — 5.86, Fat, g — 13.12, Carbohydrates, g — 44.05",
                            IsVegetarian = true,
                            ModifyDateTime = new DateTime(2024, 2, 27, 6, 28, 30, 319, DateTimeKind.Utc).AddTicks(1803),
                            Name = "Sweet Roll with Orange and Banana",
                            Photo = "https://www.nourish-and-fete.com/wp-content/uploads/2022/04/orange-sweet-rolls-6-680x1020.jpg",
                            Price = 250.0
                        },
                        new
                        {
                            Id = new Guid("b5ae41aa-67a8-4224-4196-08dc375d5081"),
                            AverageRating = 0f,
                            Category = 3,
                            CreateDateTime = new DateTime(2024, 2, 27, 6, 28, 30, 319, DateTimeKind.Utc).AddTicks(1808),
                            Description = "Cheese flatbread, banana, peanuts, cream cheese, chocolate chips, caramel topping",
                            IsVegetarian = true,
                            ModifyDateTime = new DateTime(2024, 2, 27, 6, 28, 30, 319, DateTimeKind.Utc).AddTicks(1808),
                            Name = "Sweet Roll with Peanuts and Banana",
                            Photo = "https://healthyfamilyproject.com/wp-content/uploads/2017/10/web-Banana-Sushi-Rolls.jpg",
                            Price = 210.0
                        },
                        new
                        {
                            Id = new Guid("8856ca0b-613f-48ee-4197-08dc375d5081"),
                            AverageRating = 0f,
                            Category = 3,
                            CreateDateTime = new DateTime(2024, 2, 27, 6, 28, 30, 319, DateTimeKind.Utc).AddTicks(1818),
                            Description = "Cheese flatbread, banana, kiwi, cream cheese, strawberry topping",
                            IsVegetarian = true,
                            ModifyDateTime = new DateTime(2024, 2, 27, 6, 28, 30, 319, DateTimeKind.Utc).AddTicks(1818),
                            Name = "Sweet Roll with Banana and Kiwi",
                            Photo = "https://buy.am/media/image/0f/a5/3b/murakami-sweet-roll001.webp",
                            Price = 220.0
                        },
                        new
                        {
                            Id = new Guid("cbce5419-0097-4df0-4198-08dc375d5081"),
                            AverageRating = 0f,
                            Category = 3,
                            CreateDateTime = new DateTime(2024, 2, 27, 6, 28, 30, 319, DateTimeKind.Utc).AddTicks(1828),
                            Description = "New York Cheesecake – a true classic. Its base is a combination of the delicate flavors of creamy cheese and a thin, crumbly biscuit crust",
                            IsVegetarian = true,
                            ModifyDateTime = new DateTime(2024, 2, 27, 6, 28, 30, 319, DateTimeKind.Utc).AddTicks(1828),
                            Name = "New York Cheesecake",
                            Photo = "https://www.onceuponachef.com/images/2017/12/cheesecake-760x882.jpg",
                            Price = 210.0
                        },
                        new
                        {
                            Id = new Guid("3ec56096-60e5-4ea6-50a0-08dd60881c31"),
                            AverageRating = 0f,
                            Category = 0,
                            CreateDateTime = new DateTime(2025, 3, 11, 10, 33, 6, 299, DateTimeKind.Utc).AddTicks(7021),
                            Description = "Пшеничная лапша обжаренная на воке с колбасками пепперони, маслинами, сладким перцем и перцем халапеньо в томатном соусе с добавлением петрушки. БЖУ на 100 г. Белки, г — 8,18 Жиры, г — 16,33 Углеводы, г — 20,62",
                            IsVegetarian = false,
                            ModifyDateTime = new DateTime(2025, 3, 11, 10, 33, 6, 299, DateTimeKind.Utc).AddTicks(7021),
                            Name = "Wok а-ля Диаблo",
                            Photo = "https://mistertako.ru/uploads/products/663ab868-85ec-11ea-a9ab-86b1f8341741.jpg",
                            Price = 330.0
                        },
                        new
                        {
                            Id = new Guid("32c20209-5477-4d8c-50a1-08dd60881c31"),
                            AverageRating = 0f,
                            Category = 0,
                            CreateDateTime = new DateTime(2025, 3, 11, 10, 33, 6, 299, DateTimeKind.Utc).AddTicks(7031),
                            Description = "Пшеничная лапша обжаренная на воке с фаршем (Говядина/свинина) и овощами (шампиньоны, перец сладкий, лук красный) в томатном соусе с добавлением чесночно–имбирной заправки и петрушки. БЖУ на 100 г. Белки, г — 8,07 Жиры, г — 15,38 Углеводы, г — 23,22",
                            IsVegetarian = false,
                            ModifyDateTime = new DateTime(2025, 3, 11, 10, 33, 6, 299, DateTimeKind.Utc).AddTicks(7031),
                            Name = "Wok болоньезе",
                            Photo = "https://mistertako.ru/uploads/products/663ab866-85ec-11ea-a9ab-86b1f8341741.jpg",
                            Price = 290.0
                        },
                        new
                        {
                            Id = new Guid("e8f66fdd-823a-4e6d-50a2-08dd60881c31"),
                            AverageRating = 0f,
                            Category = 0,
                            CreateDateTime = new DateTime(2025, 3, 11, 10, 33, 6, 299, DateTimeKind.Utc).AddTicks(7040),
                            Description = "Лапша пшеничная, куриное филе, шампиньоны, лук красный, заправка Том Ям (паста Том Ям, паста Том Кха, сахар, соевый соус), сливки, соевый соус, помидор, перец чили. БЖУ на 100 г. Белки, г - 7,05 Жиры, г - 12,92 Углеводы, г - 18,65",
                            IsVegetarian = false,
                            ModifyDateTime = new DateTime(2025, 3, 11, 10, 33, 6, 299, DateTimeKind.Utc).AddTicks(7040),
                            Name = "Wok том ям с курицей",
                            Photo = "https://mistertako.ru/uploads/products/a41bd9fd-54ed-11ed-8575-0050569dbef0.jpg",
                            Price = 280.0
                        },
                        new
                        {
                            Id = new Guid("d0c706ec-624b-42dc-50a3-08dd60881c31"),
                            AverageRating = 0f,
                            Category = 0,
                            CreateDateTime = new DateTime(2025, 3, 11, 10, 33, 6, 299, DateTimeKind.Utc).AddTicks(7045),
                            Description = "Лапша пшеничная, креветки, кальмар, шампиньоны, лук красный, заправка Том Ям (паста Том Ям, паста Том Кха, сахар, соевый соус), сливки, соевый соус, помидор, перец чили. БЖУ на 100 г. Белки, г - 8,57 Жиры, г - 12,8 Углеводы, г - 18,8",
                            IsVegetarian = false,
                            ModifyDateTime = new DateTime(2025, 3, 11, 10, 33, 6, 299, DateTimeKind.Utc).AddTicks(7045),
                            Name = "Wok том ям с морепродуктам",
                            Photo = "https://mistertako.ru/uploads/products/bacd88ca-54ed-11ed-8575-0050569dbef0.jpg",
                            Price = 340.0
                        },
                        new
                        {
                            Id = new Guid("b9496184-819a-47fe-50a4-08dd60881c31"),
                            AverageRating = 0f,
                            Category = 0,
                            CreateDateTime = new DateTime(2025, 3, 11, 10, 33, 6, 299, DateTimeKind.Utc).AddTicks(7050),
                            Description = "Лапша пшеничная, шампиньоны, лук красный, заправка Том Ям (паста Том Ям, паста Том Кха, сахар, соевый соус), сливки, соевый соус, помидор, перец чили. БЖУ на 100 г. Белки, г - 5,32 Жиры, г - 14,89 Углеводы, г - 22,46",
                            IsVegetarian = true,
                            ModifyDateTime = new DateTime(2025, 3, 11, 10, 33, 6, 299, DateTimeKind.Utc).AddTicks(7050),
                            Name = "Wok том ям с овощами",
                            Photo = "https://mistertako.ru/uploads/products/cd661716-54ed-11ed-8575-0050569dbef0.jpg",
                            Price = 250.0
                        },
                        new
                        {
                            Id = new Guid("082a8b0a-e426-4332-50a5-08dd60881c31"),
                            AverageRating = 0f,
                            Category = 1,
                            CreateDateTime = new DateTime(2025, 3, 11, 10, 33, 6, 299, DateTimeKind.Utc).AddTicks(7055),
                            Description = "4 сыра: «Моцарелла», «Гауда», «Фета», «Дор-блю», сливочно-сырный соус, пряные травы",
                            IsVegetarian = true,
                            ModifyDateTime = new DateTime(2025, 3, 11, 10, 33, 6, 299, DateTimeKind.Utc).AddTicks(7055),
                            Name = "4 сыра",
                            Photo = "https://mistertako.ru/uploads/products/77888c7e-8327-11ec-8575-0050569dbef0.",
                            Price = 360.0
                        },
                        new
                        {
                            Id = new Guid("dc1f3446-5e24-485e-50a6-08dd60881c31"),
                            AverageRating = 0f,
                            Category = 1,
                            CreateDateTime = new DateTime(2025, 3, 11, 10, 33, 6, 299, DateTimeKind.Utc).AddTicks(7060),
                            Description = "Копченая куриная грудка, свежие шампиньоны, маринованные опята, сыр «Моцарелла», сыр «Гауда», сливочно-чесночный соус, свежая зелень.",
                            IsVegetarian = false,
                            ModifyDateTime = new DateTime(2025, 3, 11, 10, 33, 6, 299, DateTimeKind.Utc).AddTicks(7060),
                            Name = "Белиссимо",
                            Photo = "https://mistertako.ru/uploads/products/9ee8ed49-8327-11ec-8575-0050569dbef0.",
                            Price = 400.0
                        },
                        new
                        {
                            Id = new Guid("2626c344-492a-43e7-50a7-08dd60881c31"),
                            AverageRating = 0f,
                            Category = 2,
                            CreateDateTime = new DateTime(2025, 3, 11, 10, 33, 6, 299, DateTimeKind.Utc).AddTicks(7065),
                            Description = "Сырный бульон с пшеничной лапшой, отварным куриным филе,помидором и сырными шариками. БЖУ на 100 г. Белки, г — 11,8 Жиры, г — 9,82 Углеводы, г — 22,69",
                            IsVegetarian = false,
                            ModifyDateTime = new DateTime(2025, 3, 11, 10, 33, 6, 299, DateTimeKind.Utc).AddTicks(7065),
                            Name = "Рамен сырный",
                            Photo = "https://mistertako.ru/uploads/products/ccd8e2de-5f36-11e8-8f7d-00155dd9fd01.jpg",
                            Price = 300.0
                        },
                        new
                        {
                            Id = new Guid("d077fc57-b474-446d-50a8-08dd60881c31"),
                            AverageRating = 0f,
                            Category = 2,
                            CreateDateTime = new DateTime(2025, 3, 11, 10, 33, 6, 299, DateTimeKind.Utc).AddTicks(7070),
                            Description = "Бульон рамен со сливками (куриный бульон, чесночно-имбирная заправка, соевый соус) с пшеничной лапшой, отварной курицей, омлетом Томаго и шампиньонами. БЖУ на 100 г. Белки, г — 8,13 Жиры, г — 6,18 Углеводы, г — 8,08",
                            IsVegetarian = false,
                            ModifyDateTime = new DateTime(2025, 3, 11, 10, 33, 6, 299, DateTimeKind.Utc).AddTicks(7070),
                            Name = "Сливочный рамен с курицей и шампиньонами",
                            Photo = "https://mistertako.ru/uploads/products/ccd8e2de-5f36-11e8-8f7d-00155dd9fd01.jpg",
                            Price = 260.0
                        },
                        new
                        {
                            Id = new Guid("05b857e1-245a-43e4-50a9-08dd60881c31"),
                            AverageRating = 0f,
                            Category = 2,
                            CreateDateTime = new DateTime(2025, 3, 11, 10, 33, 6, 299, DateTimeKind.Utc).AddTicks(7075),
                            Description = "Знаменитый тайский острый суп со сливками, куриным филе, шампиньонами, красным луком, помидором, перчиком Чили и кинзой. Подается с рисом. БЖУ на 100 г. Белки, г — 5,75 Жиры, г — 3,72 Углеводы, г — 14,76",
                            IsVegetarian = false,
                            ModifyDateTime = new DateTime(2025, 3, 11, 10, 33, 6, 299, DateTimeKind.Utc).AddTicks(7075),
                            Name = "Том ям кай",
                            Photo = "https://mistertako.ru/uploads/products/ccd8e2de-5f36-11e8-8f7d-00155dd9fd01.jpg",
                            Price = 300.0
                        },
                        new
                        {
                            Id = new Guid("8e427982-31eb-4353-50aa-08dd60881c31"),
                            AverageRating = 0f,
                            Category = 4,
                            CreateDateTime = new DateTime(2025, 3, 11, 10, 33, 6, 299, DateTimeKind.Utc).AddTicks(7084),
                            Description = "Облепиха, имбирь, сахар",
                            IsVegetarian = true,
                            ModifyDateTime = new DateTime(2025, 3, 11, 10, 33, 6, 299, DateTimeKind.Utc).AddTicks(7084),
                            Name = "Морс облепиховый",
                            Photo = "https://mistertako.ru/uploads/products/5a7d58a5-879d-11eb-850a-0050569dbef0.jpg",
                            Price = 90.0
                        },
                        new
                        {
                            Id = new Guid("696981ab-aa05-4aaa-50ab-08dd60881c31"),
                            AverageRating = 0f,
                            Category = 4,
                            CreateDateTime = new DateTime(2025, 3, 11, 10, 33, 6, 299, DateTimeKind.Utc).AddTicks(7089),
                            Description = "Смородиновый морс",
                            IsVegetarian = true,
                            ModifyDateTime = new DateTime(2025, 3, 11, 10, 33, 6, 299, DateTimeKind.Utc).AddTicks(7089),
                            Name = "Морс cмородиновый",
                            Photo = "https://mistertako.ru/uploads/products/120b46c1-5f32-11e8-8f7d-00155dd9fd01.jpg",
                            Price = 90.0
                        },
                        new
                        {
                            Id = new Guid("d73e3bf8-b488-4976-50ac-08dd60881c31"),
                            AverageRating = 0f,
                            Category = 4,
                            CreateDateTime = new DateTime(2025, 3, 11, 10, 33, 6, 299, DateTimeKind.Utc).AddTicks(7094),
                            Description = "Классический молочный коктейль",
                            IsVegetarian = true,
                            ModifyDateTime = new DateTime(2025, 3, 11, 10, 33, 6, 299, DateTimeKind.Utc).AddTicks(7094),
                            Name = "Коктейль классический",
                            Photo = "https://mistertako.ru/uploads/products/120b46bc-5f32-11e8-8f7d-00155dd9fd01.jpg",
                            Price = 140.0
                        },
                        new
                        {
                            Id = new Guid("7babaa47-180d-4bd7-50ad-08dd60881c31"),
                            AverageRating = 0f,
                            Category = 4,
                            CreateDateTime = new DateTime(2025, 3, 11, 10, 33, 6, 299, DateTimeKind.Utc).AddTicks(7099),
                            Description = "Классический молочный коктейль с клубничным топпингом",
                            IsVegetarian = true,
                            ModifyDateTime = new DateTime(2025, 3, 11, 10, 33, 6, 299, DateTimeKind.Utc).AddTicks(7099),
                            Name = "Коктейль клубничный",
                            Photo = "https://mistertako.ru/uploads/products/120b46bd-5f32-11e8-8f7d-00155dd9fd01.jpg",
                            Price = 170.0
                        },
                        new
                        {
                            Id = new Guid("a90116ce-e01a-4994-50ae-08dd60881c31"),
                            AverageRating = 0f,
                            Category = 4,
                            CreateDateTime = new DateTime(2025, 3, 11, 10, 33, 6, 299, DateTimeKind.Utc).AddTicks(7104),
                            Description = "Классический молочный коктейль с добавлением шоколадного топпинга",
                            IsVegetarian = true,
                            ModifyDateTime = new DateTime(2025, 3, 11, 10, 33, 6, 299, DateTimeKind.Utc).AddTicks(7104),
                            Name = "Коктейль шоколадный",
                            Photo = "https://mistertako.ru/uploads/products/120b46be-5f32-11e8-8f7d-00155dd9fd01.jpg",
                            Price = 170.0
                        },
                        new
                        {
                            Id = new Guid("3f5f9309-6e31-41c3-50af-08dd60881c31"),
                            AverageRating = 0f,
                            Category = 3,
                            CreateDateTime = new DateTime(2025, 3, 11, 10, 33, 6, 299, DateTimeKind.Utc).AddTicks(7109),
                            Description = "Апельсин, банан, шоколадная крошка, сыр творожный, сырная лепешка. БЖУ на 100 г. Белки, г - 5,86 Жиры, г - 13,12 Углеводы, г - 44,05",
                            IsVegetarian = true,
                            ModifyDateTime = new DateTime(2025, 3, 11, 10, 33, 6, 299, DateTimeKind.Utc).AddTicks(7109),
                            Name = "Сладкий ролл с апельсином и бананом",
                            Photo = "https://mistertako.ru/uploads/products/05391255-54ee-11ed-8575-0050569dbef0.jpg",
                            Price = 250.0
                        },
                        new
                        {
                            Id = new Guid("e18a4078-fad2-44a6-50b0-08dd60881c31"),
                            AverageRating = 0f,
                            Category = 3,
                            CreateDateTime = new DateTime(2025, 3, 11, 10, 33, 6, 299, DateTimeKind.Utc).AddTicks(7119),
                            Description = "Сырная лепешка, банан, арахис, сливочный сыр, шоколадная крошка, топинг карамельный",
                            IsVegetarian = true,
                            ModifyDateTime = new DateTime(2025, 3, 11, 10, 33, 6, 299, DateTimeKind.Utc).AddTicks(7119),
                            Name = "Сладкий ролл с арахисом и бананом",
                            Photo = "https://mistertako.ru/uploads/products/a4772f7a-7a6f-11eb-850a-0050569dbef0.jpeg",
                            Price = 210.0
                        },
                        new
                        {
                            Id = new Guid("369ea9d9-238c-48a9-50b1-08dd60881c31"),
                            AverageRating = 0f,
                            Category = 3,
                            CreateDateTime = new DateTime(2025, 3, 11, 10, 33, 6, 299, DateTimeKind.Utc).AddTicks(7124),
                            Description = "Сырная лепешка, банан, киви, сливочный сыр, топинг клубничный",
                            IsVegetarian = true,
                            ModifyDateTime = new DateTime(2025, 3, 11, 10, 33, 6, 299, DateTimeKind.Utc).AddTicks(7124),
                            Name = "Сладкий ролл с бананом и киви",
                            Photo = "https://mistertako.ru/uploads/products/9e7c8581-7a6f-11eb-850a-0050569dbef0.jpeg",
                            Price = 220.0
                        },
                        new
                        {
                            Id = new Guid("19f17528-cc34-47d1-50b2-08dd60881c31"),
                            AverageRating = 0f,
                            Category = 3,
                            CreateDateTime = new DateTime(2025, 3, 11, 10, 33, 6, 299, DateTimeKind.Utc).AddTicks(7128),
                            Description = "Чизкейк Нью-Йорк - настоящая классика. Его основа - сочетание вкусов нежнейшего сливочного сыра и тонкой песочной корочки.",
                            IsVegetarian = true,
                            ModifyDateTime = new DateTime(2025, 3, 11, 10, 33, 6, 299, DateTimeKind.Utc).AddTicks(7128),
                            Name = "Чизкейк Нью-Йорк",
                            Photo = "https://mistertako.ru/uploads/products/120b46b1-5f32-11e8-8f7d-00155dd9fd01.jpg",
                            Price = 210.0
                        });
                });

            modelBuilder.Entity("RestaurantBackend.Domain.Entities.DishCart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DishId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifyDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("DishId");

                    b.HasIndex("OrderId");

                    b.ToTable("DishCarts");
                });

            modelBuilder.Entity("RestaurantBackend.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeliveryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifyDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("RestaurantBackend.Domain.Entities.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DishId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifyDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("DishId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("RestaurantBackend.Infrastructure.Identity.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifyDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("RestaurantBackend.Infrastructure.Identity.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifyDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("RestaurantBackend.Infrastructure.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("RestaurantBackend.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("RestaurantBackend.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("RestaurantBackend.Infrastructure.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantBackend.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("RestaurantBackend.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RestaurantBackend.Domain.Entities.DishCart", b =>
                {
                    b.HasOne("RestaurantBackend.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany("DishBaskets")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("RestaurantBackend.Domain.Entities.Dish", "Dish")
                        .WithMany("DishCarts")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantBackend.Domain.Entities.Order", "Order")
                        .WithMany("DishCarts")
                        .HasForeignKey("OrderId");

                    b.Navigation("Dish");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("RestaurantBackend.Domain.Entities.Order", b =>
                {
                    b.HasOne("RestaurantBackend.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany("Orders")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("RestaurantBackend.Domain.Entities.Rating", b =>
                {
                    b.HasOne("RestaurantBackend.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany("Ratings")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("RestaurantBackend.Domain.Entities.Dish", "Dish")
                        .WithMany("Ratings")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");
                });

            modelBuilder.Entity("RestaurantBackend.Domain.Entities.Dish", b =>
                {
                    b.Navigation("DishCarts");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("RestaurantBackend.Domain.Entities.Order", b =>
                {
                    b.Navigation("DishCarts");
                });

            modelBuilder.Entity("RestaurantBackend.Infrastructure.Identity.ApplicationUser", b =>
                {
                    b.Navigation("DishBaskets");

                    b.Navigation("Orders");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
